@page "/History"

@using Monitor.Models
@using System.Globalization
@using Monitor.Context
@using Microsoft.EntityFrameworkCore
@using Monitor.Extensions
@using Monitor.Components

@inject IDbContextFactory<DataContext> DbContextFactory

<PageTitle>Historique</PageTitle>

<PageHeader Title="Historique" Subtitle="@DataVoltageBattery.LastOrDefault()?.date" />

<Spin Spinning="Loading">
    <GridRow Gutter="(16, 16)" Justify="center">
        <GridCol Xs="24" Md="12">
            <Stat Title="Température" Data="@_temperature" Suffix="°C" />
        </GridCol>
        <GridCol Xs="24" Md="12">
            <Stat Title="Intensité solaire" Data="@_currentSolar" Suffix="mA" />
        </GridCol>
        
        <GridCol Xs="24" Md="12">
            <Stat Title="Voltage batterie" Data="@_voltageBattery" Suffix="V" />
        </GridCol>
        <GridCol Xs="24" Md="12">
            <Stat Title="Intensité batterie" Data="@_currentBattery" Suffix="mA" />
        </GridCol>
    </GridRow>
    
    <AntDesign.Charts.Line Data="DataVoltageBattery" Config="_configVoltageBattery"/>
    <AntDesign.Charts.Line Data="DataVoltageSolar" Config="_configVoltageSolar"/>
    <AntDesign.Charts.Line Data="DataCurrent" Config="_configCurrent"/>
    <AntDesign.Charts.Line Data="DataWeather" Config="_configTemperature"/>
    <AntDesign.Charts.Line Data="DataWeatherPressure" Config="_configPressure"/>
    
    <GridRow Gutter="(16, 16)" Justify="center">
        <GridCol Xs="24" Md="12">
            <Stat Title="Humidité" Data="@_humidity" Suffix="%" />
        </GridCol>
        <GridCol Xs="24" Md="12">
            <Stat Title="Pression" Data="@_pressure" Suffix="hPa" />
        </GridCol>
        
        <GridCol Xs="24" Md="12">
            <Stat Title="LoRa RX" ShowMin="false" Data="@_loraRx" />
        </GridCol>
        <GridCol Xs="24" Md="12">
            <Stat Title="Uptime" ShowMin="false" Data="@_uptime" Type="@typeof(TimeSpan)" />
        </GridCol>
        
        <GridCol Xs="24" Md="12">
            <Stat Title="Réveil" Data="@_wakeup" Type="@typeof(DateTime)" />
        </GridCol>
        <GridCol Xs="24" Md="12">
            <Stat Title="Dodo" Data="@_dozeOff" Type="@typeof(DateTime)" />
        </GridCol>
    </GridRow>
</Spin>

@code
{
    private readonly StatsView _uptime = new();
    private readonly StatsView _wakeup = new();
    private readonly StatsView _dozeOff = new();
    private readonly StatsView _voltageBattery = new();
    private readonly StatsView _currentBattery = new();
    private readonly StatsView _currentSolar = new();
    private readonly StatsView _loraRx = new();
    private readonly StatsView _temperature = new();
    private readonly StatsView _humidity = new();
    private readonly StatsView _pressure = new();
    
    protected override async Task OnInitializedAsync()
    {
        await UpdateData();
        await base.OnInitializedAsync();
    }

    private async Task UpdateData()
    {
        Loading = true;
        
        var context = await DbContextFactory.CreateDbContextAsync();

        _uptime.FromData(context.Systems.Select(d => new StatsView.UnitData
        {
            DateTime = d.CreatedAt,
            Value = d.Uptime
        }));

        var wakeupDozeOff = context.Systems.Select(d => new StatsView.UnitData
        {
            DateTime = d.CreatedAt,
            Value = d.CreatedAt.ToUnixTimestamp()
        }).OrderBy(d => d.DateTime).GroupBy(d => d.DateTime).ToList().AsQueryable();
        
        _wakeup.FromData(wakeupDozeOff.Select(d => d.First()));
        _dozeOff.FromData(wakeupDozeOff.Select(d => d.Last()));

        _voltageBattery.FromData(context.Mppts.Select(d => new StatsView.UnitData
        {
            DateTime = d.CreatedAt,
            Value = d.BatteryVoltage / 1000.0
        }));
        
        _currentBattery.FromData(context.Mppts.Select(d => new StatsView.UnitData
        {
            DateTime = d.CreatedAt,
            Value = d.BatteryCurrent
        }));
        
        _currentSolar.FromData(context.Mppts.Select(d => new StatsView.UnitData
        {
            DateTime = d.CreatedAt,
            Value = d.SolarCurrent
        }));

        _loraRx.FromData(context.LoRas.Select(d => new StatsView.UnitData
        {
            DateTime = d.CreatedAt,
            Value = d.IsTx ? 0 : 1
        }).GroupBy(d => d.DateTime.Date, (time, data) => new StatsView.UnitData
        {
            DateTime = time,
            Value = data.Sum(d => d.Value)
        }));

        _temperature.FromData(context.Weathers.Select(d => new StatsView.UnitData
        {
            DateTime = d.CreatedAt,
            Value = d.Temperature
        }));

        _humidity.FromData(context.Weathers.Select(d => new StatsView.UnitData
        {
            DateTime = d.CreatedAt,
            Value = d.Humidity
        }));

        _pressure.FromData(context.Weathers.Select(d => new StatsView.UnitData
        {
            DateTime = d.CreatedAt,
            Value = d.Pressure
        }));
        
        var mpptData = await context.Mppts.OrderByDescending(m => m.Id)
            .Take(500)
            .Reverse()
            .ToListAsync();
        var weatherData = await context.Weathers.OrderByDescending(m => m.Id)
            .Take(500)
            .Reverse()
            .ToListAsync();
        
        DataVoltageBattery = mpptData.SelectMany(m => new List<LineChartData<float>>
        {
            new()
            {
                date = m.CreatedAt.ToFrench().ToString(CultureInfo.CurrentCulture),
                type = "Tension batterie",
                value = m.BatteryVoltage / 1000.0f
            }
        }).ToList();
        
        DataVoltageSolar = mpptData.SelectMany(m => new List<LineChartData<float>>
        {
            new()
            {
                date = m.CreatedAt.ToFrench().ToString(CultureInfo.CurrentCulture),
                type = "Tension panneau",
                value = m.SolarVoltage / 1000.0f
            }
        }).ToList();
        
        DataCurrent = mpptData.SelectMany(m => new List<LineChartData<int>>
        {
            new()
            {
                date = m.CreatedAt.ToFrench().ToString(CultureInfo.CurrentCulture),
                type = "Intensité batterie",
                value = m.BatteryCurrent
            },
            new()
            {
                date = m.CreatedAt.ToFrench().ToString(CultureInfo.CurrentCulture),
                type = "Intensité panneau",
                value = m.SolarCurrent
            }
        }).ToList();
        
        DataWeather = weatherData.SelectMany(m => new List<LineChartData<float>>
        {
            new()
            {
                date = m.CreatedAt.ToFrench().ToString(CultureInfo.CurrentCulture),
                type = "Humidité",
                value = m.Humidity
            },
            new()
            {
                date = m.CreatedAt.ToFrench().ToString(CultureInfo.CurrentCulture),
                type = "Température",
                value = m.Temperature
            },
        }).ToList();
        
        DataWeatherPressure = weatherData.SelectMany(m => new List<LineChartData<float>>
        {
            new()
            {
                date = m.CreatedAt.ToFrench().ToString(CultureInfo.CurrentCulture),
                type = "Pression",
                value = m.Pressure
            },
        }).ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Loading = false;
        
        await InvokeAsync(StateHasChanged);
        await base.OnAfterRenderAsync(firstRender);
    }

    List<LineChartData<float>> DataVoltageBattery { get; set; } = [];
    List<LineChartData<float>> DataVoltageSolar { get; set; } = [];
    List<LineChartData<int>> DataCurrent { get; set; } = [];
    List<LineChartData<float>> DataWeather { get; set; } = [];
    List<LineChartData<float>> DataWeatherPressure { get; set; } = [];

    readonly LineConfig _configVoltageBattery = new()
    {
        Padding = "auto",
        AutoFit = true,
        XField = nameof(LineChartData<object>.date),
        YField = nameof(LineChartData<object>.value),
        YAxis = new ValueAxis
        {
            Label = new BaseAxisLabel
            {
                Visible = true,
            },
            Title = new BaseAxisTitle
            {
                Text = "Tension (V)",
                Visible = true
            },
            Visible = true,
            Min = 11,
        },
        Legend = new Legend
        {
            Visible = false
        },
        SeriesField = nameof(LineChartData<object>.type),
        Color = new [] { "blue" }
    };
    
    readonly LineConfig _configVoltageSolar = new()
    {
        Padding = "auto",
        AutoFit = true,
        XField = nameof(LineChartData<object>.date),
        YField = nameof(LineChartData<object>.value),
        YAxis = new ValueAxis
        {
            Label = new BaseAxisLabel
            {
                Visible = true,
            },
            Title = new BaseAxisTitle
            {
                Text = "Tension (V)",
                Visible = true
            },
            Visible = true
        },
        Legend = new Legend
        {
            Visible = false
        },
        SeriesField = nameof(LineChartData<object>.type),
        Color = new [] { "red" }
    };
    
    readonly LineConfig _configCurrent = new()
    {
        Padding = "auto",
        AutoFit = true,
        XField = nameof(LineChartData<object>.date),
        YField = nameof(LineChartData<object>.value),
        YAxis = new ValueAxis
        {
            Label = new BaseAxisLabel
            {
                Visible = true,
            },
            Title = new BaseAxisTitle
            {
                Text = "Courant (mA)",
                Visible = true
            },
            Min = 0,
            // Max = 1000,
            Visible = true
        },
        Legend = new Legend
        {
            Position = "bottom"
        },
        SeriesField = nameof(LineChartData<object>.type),
        Color = new [] { "blue", "red" }
    };
    
    readonly LineConfig _configTemperature = new()
    {
        Padding = "auto",
        AutoFit = true,
        XField = nameof(LineChartData<object>.date),
        YField = nameof(LineChartData<object>.value),
        YAxis = new ValueAxis
        {
            Label = new BaseAxisLabel
            {
                Visible = true,
            },
            Title = new BaseAxisTitle
            {
                Text = "Température (°C) / Humidité (%)"
            },
            Min = -10,
            Max = 100,
            Visible = true
        },
        Legend = new Legend
        {
            Position = "bottom"
        },
        SeriesField = nameof(LineChartData<object>.type),
        Color = new [] { "blue", "red" }
    };
    
    readonly LineConfig _configPressure = new()
    {
        Padding = "auto",
        AutoFit = true,
        XField = nameof(LineChartData<object>.date),
        YField = nameof(LineChartData<object>.value),
        YAxis = new ValueAxis
        {
            Label = new BaseAxisLabel
            {
                Visible = true,
            },
            Title = new BaseAxisTitle
            {
                Text = "Pression atmosphérique (hPa)"
            },
            Min = 950,
            Max = 1050,
            Visible = true
        },
        Legend = new Legend
        {
            Position = "bottom"
        },
        SeriesField = nameof(LineChartData<object>.type),
        Color = new [] { "blue" }
    };

    private bool Loading { get; set; } = true;
}
